{"slug":"2019-01-24-orchestrating-requests-at-component-level","filename":"2019-01-24-orchestrating-requests-at-component-level","title":"Orchestrating requests at component level","date":"Thu, 24 Jan 2019 00:00:00 GMT","draft":false,"meta":{"date":"2019-01-24T00:00:00.000Z","title":"Orchestrating requests at component level"},"body":"<p><a href=\"/blog/2019-01-20-requests-with-reasonml/\">In a previous article</a>, we saw how we can model request statuses in our ReasonReact component state, so that we prevent weird or impossible states.</p>\n<p>Now, let's see how we can orchestrate them <strong>within</strong> our components.</p>\n<p>When I was using JavaScript, I generally put all the logic involving server requests in Redux. This wasn't an obligation, but thinking in actions really helped figuring out what was happening, which was harder when calling <code>setState</code> all over the place. Using Reason, and given the evolution of React, I feel I don't need this anymore:</p>\n<ul>\n<li>with reducer components, <strong>thinking in actions and state</strong> can happen locally</li>\n<li>props drilling is ok when backed by a <strong>static type system</strong></li>\n<li>portals reduce the need for a global store that components subscribe to: you can <strong>pass the data</strong> from a component <strong>to a portal</strong> that's rendered elsewhere</li>\n<li>true isolation between components makes a lot of things easier: they're <strong>reusable</strong>, their <strong>data dependencies are explicit</strong> and statically analysable, and their implementation doesn't leak to a shared store</li>\n<li>reducer components embed a <a href=\"https://reasonml.github.io/reason-react/docs/en/state-actions-reducer#state-update-through-reducer\">powerful update mechanism</a>, which is much more practical than using lifecycle or chaining promises in actions</li>\n</ul>\n<h2>In practice</h2>\n<p>Let's say we have a component that needs to fetch a <code>User</code> and then fetch their <code>Statistics</code>, which are identified by a value we might find in the payload of the first request.</p>\n<p>First, we can write an interface file (<code>.rei</code>) that lets us define what we want to expose from the implementation file we're about to do:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">type</span> state;\n\n<span class=\"hljs-keyword\">type</span> action;\n\n<span class=\"hljs-keyword\">let</span> make = array(<span class=\"hljs-module-identifier\">React</span>.reactElement) =&gt;\n  <span class=\"hljs-module-identifier\">React</span>.component(state, <span class=\"hljs-module-identifier\">React</span>.noRetainedProps, action);\n</code></pre>\n<p>This will help the compiler notice dead code, and making <code>state</code> and <code>action</code> opaque to the outside world even enables us to check if action constructors ever used, enabling the removal of entire codepaths that aren't ever executed!</p>\n<p>Now for the implementation file:</p>\n<p>Define the state we want:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">type</span> state = {\n  user: <span class=\"hljs-module-identifier\">RequestStatus</span>.t(<span class=\"hljs-module-identifier\">Result</span>.t(<span class=\"hljs-module-identifier\">User</span>.t, <span class=\"hljs-module-identifier\">Errors</span>.t)),\n  statistics: <span class=\"hljs-module-identifier\">RequestStatus</span>.t(<span class=\"hljs-module-identifier\">Result</span>.t(<span class=\"hljs-module-identifier\">Statistics</span>.t, <span class=\"hljs-module-identifier\">Errors</span>.t)),\n};\n</code></pre>\n<p>The actions that will occur:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">type</span> action =\n  | <span class=\"hljs-constructor\">LoadUser</span>\n  | <span class=\"hljs-constructor\">ReceiveUser</span>(<span class=\"hljs-module-identifier\">Result</span>.t(<span class=\"hljs-module-identifier\">User</span>.t, <span class=\"hljs-module-identifier\">Errors</span>.t))\n  | <span class=\"hljs-constructor\">LoadStatistics</span>(string)\n  | <span class=\"hljs-constructor\">ReceiveStatistics</span>(<span class=\"hljs-module-identifier\">Result</span>.t(<span class=\"hljs-module-identifier\">Statistics</span>.t, <span class=\"hljs-module-identifier\">Errors</span>.t));\n</code></pre>\n<p>Our initial state will look like this:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> initialState = {user: <span class=\"hljs-constructor\">NotAsked</span>, statistics: <span class=\"hljs-constructor\">NotAsked</span>};\n</code></pre>\n<p>So, we now have the basics! We can start writing our reducer:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> reducer = (action, state) =&gt;\n  <span class=\"hljs-keyword\">switch</span> (action) {\n  <span class=\"hljs-comment\">/* show as loading, then start the request */</span>\n  | <span class=\"hljs-constructor\">LoadUser</span> =&gt;\n    <span class=\"hljs-constructor\">UpdateWithSideEffects</span>(\n      {<span class=\"hljs-operator\">...</span>state, user: <span class=\"hljs-constructor\">Loading</span>},\n      (\n        ({send}) =&gt;\n          <span class=\"hljs-module-identifier\">User</span>.get()<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Future</span>.get(payload =&gt; send(<span class=\"hljs-constructor\">ReceiveUser</span>(payload)))\n      ),\n    )\n  <span class=\"hljs-comment\">/* when we find a statisticsKey, set the user and start the second request */</span>\n  | <span class=\"hljs-constructor\">ReceiveUser</span>(<span class=\"hljs-constructor\">Ok</span>({statisticsKey: <span class=\"hljs-constructor\">Some</span>(key)}) <span class=\"hljs-keyword\">as</span> user) =&gt;\n    <span class=\"hljs-constructor\">UpdateWithSideEffects</span>(\n      {<span class=\"hljs-operator\">...</span>state, user: <span class=\"hljs-constructor\">Done</span>(user)},\n      (({send}) =&gt; send(<span class=\"hljs-constructor\">LoadStatistics</span>(key))),\n    )\n  <span class=\"hljs-comment\">/* otherwise just set the user */</span>\n  | <span class=\"hljs-constructor\">ReceiveUser</span>(user) =&gt; <span class=\"hljs-constructor\">Update</span>({<span class=\"hljs-operator\">...</span>state, user: <span class=\"hljs-constructor\">Done</span>(user)})\n  | <span class=\"hljs-constructor\">LoadStatistics</span>(key) =&gt;\n    <span class=\"hljs-constructor\">UpdateWithSideEffects</span>(\n      {<span class=\"hljs-operator\">...</span>state, statistics: <span class=\"hljs-constructor\">Loading</span>},\n      (\n        ({send}) =&gt;\n          <span class=\"hljs-module-identifier\">Statistics</span>.get(key)\n          <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Future</span>.get(payload =&gt; send(<span class=\"hljs-constructor\">ReceiveStatistics</span>(payload)))\n      ),\n    )\n  | <span class=\"hljs-constructor\">ReceiveStatistics</span>(statistics) =&gt;\n    <span class=\"hljs-constructor\">Update</span>({<span class=\"hljs-operator\">...</span>state, statistics: <span class=\"hljs-constructor\">Done</span>(statistics)})\n  };\n</code></pre>\n<p>Pattern matching our actions is really interesting here:</p>\n<ul>\n<li>If the <code>User</code> request fails or doesn't contain a <code>statisticsKey</code>, we don't even bother querying <code>Statistics</code>: we just store the error or user in state, and can render UI accordingly</li>\n<li>We can easily see the request chaining</li>\n</ul>\n<p>All that's left to do is a bit of pattern matching in our render function:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">switch</span> (state.user) {\n| <span class=\"hljs-constructor\">NotAsked</span> =&gt; <span class=\"hljs-module-identifier\">React</span>.null\n| <span class=\"hljs-constructor\">Loading</span> =&gt; &lt;<span class=\"hljs-module-identifier\">ActivityIndicator</span> /&gt;\n| <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Error</span>(error)) =&gt; &lt;<span class=\"hljs-module-identifier\">ErrorIndicator</span> error /&gt;\n| <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Ok</span>(user)) =&gt;\n  &lt;&gt;\n    &lt;<span class=\"hljs-module-identifier\">UserCard</span> user /&gt;\n    {\n      <span class=\"hljs-keyword\">switch</span> (state.statistics) {\n      | <span class=\"hljs-constructor\">NotAsked</span> =&gt; <span class=\"hljs-module-identifier\">React</span>.null\n      | <span class=\"hljs-constructor\">Loading</span> =&gt; &lt;<span class=\"hljs-module-identifier\">ActivityIndicator</span> /&gt;\n      | <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Error</span>(error)) =&gt; &lt;<span class=\"hljs-module-identifier\">ErrorIndicator</span> error /&gt;\n      | <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Ok</span>(statistics)) =&gt; &lt;<span class=\"hljs-module-identifier\">Stats</span> statistics /&gt;\n      }\n    }\n  &lt;/&gt;\n};\n</code></pre>\n"}