{"slug":"2019-02-10-what-is-the-option-type-and-what-does-it-solve","title":"What is the option type, and what does it solve?","date":"Sun, 10 Feb 2019 00:00:00 GMT","draft":false,"meta":{"date":"2019-02-10T00:00:00.000Z","title":"What is the option type, and what does it solve?"},"body":"<p>Most popular languages right now have a particular value called <code>null</code>, which represent the deliberate absence of a value (JS also has <code>undefined</code>, which pretty much works the same but has a slightly different purpose).</p>\n<p>With that in mind, most statically typed functional languages don't have a concept of <code>null</code>. They express it using a <strong>variant type</strong>. This particular type can be seen as a <strong>little container</strong> that wraps a value (or no value), and is generally called <strong>option</strong> or <strong>maybe</strong>.</p>\n<h2>The type itself</h2>\n<p>It looks like the following:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">type</span> option(&#x27;value) =\n  | <span class=\"hljs-constructor\">None</span> <span class=\"hljs-comment\">/* meaning no value */</span>\n  | <span class=\"hljs-constructor\">Some</span>(&#x27;value) <span class=\"hljs-comment\">/* meaning one value of type `&#x27;value`*/</span>\n</code></pre>\n<p><code>'value</code> here is what we call a <strong>type parameter</strong>, and it enables types to be «generic»: it lets you or the language inference to refine it later.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> isMyself = <span class=\"hljs-keyword\">fun</span>\n  | <span class=\"hljs-constructor\">Some</span>(<span class=\"hljs-string\">&quot;Matthias&quot;</span>) =&gt; <span class=\"hljs-literal\">true</span>\n  | <span class=\"hljs-constructor\">Some</span>(_) | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-literal\">false</span>;\n</code></pre>\n<p>Here, the function will have the following signature:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> isMyself: option(string) =&gt; bool;\n                  <span class=\"hljs-comment\">/* ^ see? it got filled! */</span>\n</code></pre>\n<p>These type parameters enable us to create generic abstractions over types. We can for instance create a <code>map</code> function for options:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> map = (opt, f) =&gt;\n  <span class=\"hljs-keyword\">switch</span> (opt) {\n  | <span class=\"hljs-constructor\">Some</span>(x) =&gt; <span class=\"hljs-constructor\">Some</span>(f(x))\n  | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-constructor\">None</span>\n  };\n</code></pre>\n<p>This function can be used for any option! Let's look at the inferred signature:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> map: (option(&#x27;a), &#x27;a =&gt; &#x27;b) =&gt; option(&#x27;b);\n</code></pre>\n<p>This reads as:</p>\n<ul>\n<li>we have a map function</li>\n<li>it takes an option containing a value of type <code>a</code></li>\n<li>it takes a function that takes a value of type <code>a</code> and returns a value of type <code>b</code></li>\n<li>it returns an option containing a value of type <code>b</code></li>\n</ul>\n<p>As another exemple, here's a <code>flatMap</code> function for options:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> flatMap = (opt, f) =&gt;\n  <span class=\"hljs-keyword\">switch</span> (opt) {\n  | <span class=\"hljs-constructor\">Some</span>(x) =&gt; f(x)\n  | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-constructor\">None</span>\n  };\n<span class=\"hljs-comment\">/* let flatMap: (option(&#x27;a), &#x27;a =&gt; option(&#x27;b)) =&gt; option(&#x27;b); */</span>\n</code></pre>\n<h2>What option solves</h2>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> item = array.find(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item === <span class=\"hljs-literal\">undefined</span> || item.active)\n</code></pre>\n<p>This code will return:</p>\n<ul>\n<li>an object if an item with a truthy <code>active</code> field is found</li>\n<li><code>undefined</code> if an <code>undefined</code> item is found</li>\n<li><code>undefined</code> if nothing is found</li>\n</ul>\n<p>As a result, we're unable to know in which case we are if we  receive <code>undefined</code> as return value.</p>\n<p><em>Please note that the problem would've been the same with <code>null</code> values in the array and some library <code>find</code> function that'd return <code>null</code></em>.</p>\n<p>If we want to actually be able to differentiate the last two cases, we'd be forced to use another function, <code>findIndex</code>:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> index = array.findIndex(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item === <span class=\"hljs-literal\">undefined</span> || item.active);\n<span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">index == -<span class=\"hljs-number\">1</span></span>)</span> {\n  <span class=\"hljs-comment\">// not found</span>\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">// found</span>\n  <span class=\"hljs-keyword\">let</span> item = array[index];\n}\n</code></pre>\n<p>That looks bulkier, and that's because the <code>find</code> function in this context doesn't give you enough information: the <code>undefined</code> is «swallowed», and you need to deduce it yourself using some extra-logic (here, the <code>index</code> where the item is found, because it returns <code>-1</code> when it doesn't find anything).</p>\n<p>The option type solves this problem quite elegantly. Where <code>null</code> <strong>replaces</strong> the value, <code>option</code> <strong>wraps</strong> it: it's a <strong>container</strong>.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-comment\">/* getBy is the equivalent of find */</span>\n<span class=\"hljs-keyword\">let</span> item = array<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Belt</span>.<span class=\"hljs-module-identifier\">Array</span>.getBy(\n  <span class=\"hljs-keyword\">fun</span>\n    | <span class=\"hljs-constructor\">None</span> =&gt; <span class=\"hljs-literal\">true</span>\n    | <span class=\"hljs-constructor\">Some</span>({active}) =&gt; active\n);\n</code></pre>\n<p>First, <code>array</code> has the following type:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> array: array(option(value));\n</code></pre>\n<p>And <code>getBy</code> the following one:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> getBy: (array(&#x27;a), &#x27;a =&gt; bool) =&gt; option(&#x27;a);\n</code></pre>\n<p>Let's replace the type parameter by the refined type so that we can see what we'll get:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> getBy:\n  (\n    array(option(value)),\n    option(value) =&gt; bool\n  ) =&gt; option(option(value));\n</code></pre>\n<p><code>item</code>, the return value, will therefore have the following type:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> item: option(option(value));\n</code></pre>\n<p>It's an <code>option</code> of <code>option</code> of <code>value</code>. This means <strong>we can extract what actually happened</strong> from the return value:</p>\n<ul>\n<li>if the result is <code>Some(Some(value))</code>: we found a value with a <code>true</code> <code>active</code> field</li>\n<li>if the result is <code>Some(None)</code>: we found a value that's <code>None</code></li>\n<li>if the result is <code>None</code>: we didn't find anything</li>\n</ul>\n"}