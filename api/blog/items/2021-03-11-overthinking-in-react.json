{"slug":"2021-03-11-overthinking-in-react","filename":"2021-03-11-overthinking-in-react","title":"Overthinking in React","date":"Thu, 11 Mar 2021 00:00:00 GMT","draft":false,"meta":{"title":"Overthinking in React","date":"2021-03-11T00:00:00.000Z"},"body":"<p>Now and then, I stumble opon online pieces about how to make React applications the right wayâ„¢, whether on an optimization angle or a scalability one.</p>\n<p>Some will tell you that in order to be performant, you'll need to make <code>useMemo</code> and <code>useCallback</code> your best friends, and use it in every component. Some will tell you that you need to put your data in some kind of external store like <a href=\"https://redux.js.org\">Redux</a> or <a href=\"https://mobx.js.org/README.html\">mobx</a>. Some will argue about the best way to organize your <a href=\"https://styled-components.com\">styled components</a>. Some will tell you how the <a href=\"https://reactjs.org/docs/context.html\">Context API</a> is the solution to all your pains.</p>\n<p>The thing is, when you look at it, that <strong>most of these advices are whether aesthetical choices or premature optimizations</strong>. Managing an external store can be a pain for data invalidation and effect management, <code>useMemo</code> and <code>useCallback</code> can sometimes hurt more than they fix anything in terms of performance.</p>\n<p>You end up managing a worse codebase, for a little to none benefit, you just cycled through the <strong>hype-fatigue</strong> process.</p>\n<p>As in most industries, we have a certain kind of underlying social contract of trust with influence. Some famous tech person says something, therefore it's a <em>best practices</em>, everyone needs to update their codebase.</p>\n<p>Some call that the <a href=\"https://twitter.com/ThePracticalDev/status/718462272335704064\">Dan Abramov effect</a> (even though <a href=\"https://twitter.com/dan_abramov\">Dan</a> actually mostly writes about how not to fall for the hype). Back in the days, whenever Dan tweeted some repository, people took it for an endorsement, and jumped right in.</p>\n<p>This is the case for a <strong>lot</strong> of influential people in tech, in different areas. We tend to fall for the status, for the hype, while undermining our actual needs.</p>\n<p>If you don't want to fall in that hype-fatigue cycle, keep in mind to:</p>\n<ol>\n<li><strong>start naively</strong></li>\n<li>assess other things <strong>if there's an issue</strong></li>\n</ol>\n<p>Your code doesn't need to be hype, but what it does might.</p>\n"}