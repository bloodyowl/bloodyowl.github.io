{"title":"Static single page application","date":"2019-01-22T00:00:00.000Z","body":"<p>As you can see from the URL, this little website is hosted on GitHub pages, meaning it can only be static.</p>\n<p>The approach I chose here was to build it like a single page application that I'd render at build time.</p>\n<p>This approach gives the best of both worlds :</p>\n<ul>\n<li>an familiar and powerful way to build UIs</li>\n<li>a fast initial load</li>\n<li>a fast navigation after the first load: any transition that occur after will only query the smallest amount data it possibly can in order to render the next route</li>\n</ul>\n<h2>Getting the data for the blog</h2>\n<p>I have a blog direction with markdown files. In order to get them, I made a few bindings to glob, remarkable and front-matter so that I can transform posts into two kinds of records:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-module-identifier\">PostShallow</span> = {\n  <span class=\"hljs-keyword\">type</span> t = {\n    title: string,\n    date: string,\n    slug: string,\n  };\n};\n\n<span class=\"hljs-keyword\">module</span> <span class=\"hljs-module-identifier\">Post</span> = {\n  <span class=\"hljs-keyword\">type</span> t = {\n    title: string,\n    date: string,\n    body: string,\n  };\n};\n</code></pre>\n<p><code>postShallow</code> will be used in listings, and <code>post</code> for the detail page.</p>\n<h2>The routing</h2>\n<p>Given I use ReasonReact, I use the builtin Router solution. At first it was in my <code>App</code> component state.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> component = <span class=\"hljs-module-identifier\">React</span>.reducerComponent(<span class=\"hljs-string\">\"App\"</span>);\n\n<span class=\"hljs-keyword\">let</span> make = (_) =&gt; {\n  <span class=\"hljs-operator\">...</span>component,\n  initialState: () =&gt; <span class=\"hljs-module-identifier\">React</span>.<span class=\"hljs-module-identifier\">Router</span>.dangerouslyGetInitialUrl(),\n  reducer: (action, _state) =&gt;\n    <span class=\"hljs-keyword\">switch</span> action {\n    | <span class=\"hljs-constructor\">SetRoute</span>(url) =&gt; <span class=\"hljs-constructor\">Update</span>(url)\n    },\n  <span class=\"hljs-comment\">/* ... */</span>\n}\n</code></pre>\n<p>In order to make it statically renderable, I moved it from <code>state</code> to props. I now have a <code>Main</code> module with a recursive render function that calls itself whenever there's a URL change.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">rec</span> render = (~url=<span class=\"hljs-module-identifier\">React</span>.<span class=\"hljs-module-identifier\">Router</span>.dangerouslyGetInitialUrl(), ()) =&gt; {\n  <span class=\"hljs-comment\">/* render logic here */</span>\n  <span class=\"hljs-keyword\">let</span> watcherId = ref(<span class=\"hljs-constructor\">None</span>);\n  watcherId <span class=\"hljs-operator\">:=</span>\n    <span class=\"hljs-constructor\">Some</span>(\n      <span class=\"hljs-module-identifier\">React</span>.<span class=\"hljs-module-identifier\">Router</span>.watchUrl(url =&gt; {\n        (watcherId<span class=\"hljs-operator\">^</span>)\n        <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.map(watcherId =&gt; <span class=\"hljs-module-identifier\">React</span>.<span class=\"hljs-module-identifier\">Router</span>.unwatchUrl(watcherId))\n        <span class=\"hljs-operator\">-&gt;</span>ignore;\n        render(~url, ());\n      }),\n    );\n}\n</code></pre>\n<p>This render function will only be used on the client. At build time we'll call App directly. An important thing to remember here is that your CSS reset needs to be in App, otherwise it'll only be called once the client boots.</p>\n<h2>The data</h2>\n<p>Initially I planned to put data in route component states themselves, but this would've required extra steps in serialisation I didn't want to take for such a simple project.</p>\n<p>I simply moved the data up the <code>App</code> component state, and passed two things to the routes:</p>\n<ul>\n<li>the data they need</li>\n<li>a callback to set this data when received</li>\n</ul>\n<p>The app state actually looks quite simple:</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">type</span> state = {\n  posts: <span class=\"hljs-module-identifier\">Map</span>.<span class=\"hljs-module-identifier\">String</span>.t(<span class=\"hljs-module-identifier\">RequestStatus</span>.t(<span class=\"hljs-module-identifier\">Result</span>.t(<span class=\"hljs-module-identifier\">Post</span>.t, <span class=\"hljs-module-identifier\">Errors</span>.t))),\n  postList: <span class=\"hljs-module-identifier\">RequestStatus</span>.t(<span class=\"hljs-module-identifier\">Result</span>.t(array(<span class=\"hljs-module-identifier\">PostShallow</span>.t), <span class=\"hljs-module-identifier\">Errors</span>.t)),\n};\n</code></pre>\n<p>This way, only App is changed when the store shape changes. I could've passed the initial data so that routes can hydrate their initial state, but that would defeat the purpose for an efficient loading experience: it would've refreshed the data every time the route mounts instead of keeping it.</p>\n<h2>The styles</h2>\n<p>I use <a href=\"https://github.com/SentiaAnalytics/bs-css\">bs-css</a>, which recently switched to emotion. It simply required to write a little binding to emotion-server in order to render styles on the server.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-module-identifier\">Emotion</span> = {\n  <span class=\"hljs-attribute\">[@bs.module \"emotion-server\"]</span>\n  <span class=\"hljs-keyword\">external</span> renderStylesToString: string =&gt; string = <span class=\"hljs-string\">\"renderStylesToString\"</span>;\n};\n</code></pre>\n<h2>Hydration</h2>\n<p>For the hydration, I just check if my root element is empty and hydrate instead of render if it's not.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-keyword\">let</span> markup =\n  <span class=\"hljs-module-identifier\">DomRe</span>.(\n    <span class=\"hljs-module-identifier\">Document</span>.getElementById(<span class=\"hljs-string\">\"root\"</span>, document)\n    <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.map(<span class=\"hljs-module-identifier\">Element</span>.innerHTML)\n    <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.flatMap(item =&gt; item <span class=\"hljs-operator\">==</span> <span class=\"hljs-string\">\"\"</span> ? <span class=\"hljs-constructor\">None</span> : <span class=\"hljs-constructor\">Some</span>(item))\n  );\n  \n<span class=\"hljs-keyword\">switch</span> (markup) {\n| <span class=\"hljs-constructor\">Some</span>(_) =&gt;\n  <span class=\"hljs-module-identifier\">ReactDOMRe</span>.hydrateToElementWithId(&lt;<span class=\"hljs-module-identifier\">App</span> url ?initialData /&gt;, <span class=\"hljs-string\">\"root\"</span>)\n| <span class=\"hljs-constructor\">None</span> =&gt;\n  <span class=\"hljs-module-identifier\">ReactDOMRe</span>.renderToElementWithId(&lt;<span class=\"hljs-module-identifier\">App</span> url ?initialData /&gt;, <span class=\"hljs-string\">\"root\"</span>)\n};\n</code></pre>\n<h2>Prerender all the pages</h2>\n<p>First, I render a dummy HTML file using html-webpack-plugin, it'll be used as a template for all the pages. The plugin will just add the right app JS.</p>\n<p>I just list all pages with their URLs and the App state they need to render, and replace elements from the template with the rendered HTML, title and initial data and write files in the build directory.</p>\n<pre><code class=\"language-reason\"><span class=\"hljs-module-identifier\">Node</span>.<span class=\"hljs-module-identifier\">Fs</span>.writeFileAsUtf8Sync(\n  <span class=\"hljs-string\">\"./build/\"</span> <span class=\"hljs-operator\">++</span> <span class=\"hljs-module-identifier\">String</span>.concat(<span class=\"hljs-string\">\"/\"</span>, path) <span class=\"hljs-operator\">++</span> <span class=\"hljs-string\">\"/index.html\"</span>,\n  index\n  <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">String</span>.replace(\n      <span class=\"hljs-string\">{|&lt;div id=\"root\"&gt;&lt;/div&gt;|}</span>,\n      <span class=\"hljs-string\">{j|&lt;div id=\"root\"&gt;$prerendered&lt;/div&gt;&lt;script id=\"data\"&gt;window.initialData = $data&lt;/script&gt;|j}</span>,\n      _,\n    )\n  <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">String</span>.replace(\n      <span class=\"hljs-string\">{|&lt;title&gt;TITLE&lt;/title&gt;|}</span>,\n      <span class=\"hljs-string\">{j|&lt;title&gt;$title | @bloodyowl&lt;/title&gt;&lt;meta property=\"og:title\" content=\"$title | @bloodyowl\" /&gt;|j}</span>,\n      _,\n    ),\n);\n</code></pre>\n"}